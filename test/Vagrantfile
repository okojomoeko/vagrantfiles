# -*- mode: ruby -*-
# vi: set ft=ruby :

boxes = [
    {
        :eth1 => "192.168.33.10",
        :mem => "4096",
        :cpu => "2",
        :disk => "30GB"
    },
]

user="vagrant"
group="vagrant"
user_home="/home/vagrant"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "~/repos", "/home/vagrant/repos"
  config.vm.synced_folder "~/temp", "/home/vagrant/temp"

  boxes.each do |opts|
    # Change vm disk size. install this plugin to enable this command
    # vagrant plugin install vagrant-disksize
    config.disksize.size = opts[:disk]


    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.
    config.vm.box = "ubuntu/focal64"



    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080
    # ----------
    # For Jupyter notebook
    config.vm.network "forwarded_port", guest: 8888, host: 8888, host_ip: "127.0.0.1"
    # For web
    config.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"

    config.vm.network "forwarded_port", guest: 4000, host: 4000, host_ip: "127.0.0.1"
    # For React
    config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: opts[:eth1]

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      # vb.gui = true

      # Customize the amount of memory on the VM:
      vb.memory = opts[:mem]
      vb.cpus = opts[:cpu]
      # vb.customize ['modifyvm', :id, '--cableconnected1', 'on']
      # vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      # vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/.","1"]
    end

    # View the documentation for the provider you are using for more
    # information on available options.

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt update
    #   apt install -y apache2
    # SHELL
    config.vm.provision "shell", inline: <<-SHELL
      apt update
      # install base package
      apt install -y wget
      apt install -y zsh
      apt install -y expect

      # # Install Docker
      # apt install -y apt-transport-https ca-certificates curl software-properties-common
      # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      # apt-key fingerprint 0EBFCD88
      # add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      # apt update
      # apt install -y docker-ce
      # usermod -aG docker vagrant

      # # Install docker-compose
      # curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      # chmod +x /usr/local/bin/docker-compose

      # # install nodejs & npm
      # apt install -y nodejs npm
      # npm update -g npm
      # npm install -g -y n
      # n stable
      # apt purge -y nodejs
      # npm install -g -y npm-check-updates

      if [ ! -e #{user_home}/repos/dotfiles ]; then
          sudo -u #{user} git clone https://github.com/okojomoeko/dotfiles.git #{user_home}/repos/dotfiles
      fi
      if [ ! -e #{user_home}/temp/vagrantfiles ]; then
          sudo -u #{user} git clone https://github.com/okojomoeko/vagrantfiles.git #{user_home}/temp/vagrantfiles
      fi

      sudo -u #{user} ln -s #{user_home}/repos/dotfiles/zsh/.zshrc #{user_home}/.zshrc
      sudo -u #{user} ln -s #{user_home}/repos/dotfiles/zsh/.zsh_aliases #{user_home}/.zsh_aliases

      # Create libs directory
      sudo -u #{user} mkdir #{user_home}/libs

      # zsh setup
      chsh -s $(which zsh)
      chsh -s $(which zsh) #{user}

      # Anaconda setup
      sudo -u #{user} -i sh #{user_home}/temp/vagrantfiles/ubuntu2004/shell/setup_anaconda.sh #{user} #{user_home}
      rm -rf #{user_home}/temp/vagrantfiles
    SHELL
  end
end
